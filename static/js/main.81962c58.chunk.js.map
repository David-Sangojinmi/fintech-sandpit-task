{"version":3,"sources":["components/Generator/Generator.js","components/Graph/Title.js","components/Graph/LineGraph.js","components/Graph/BarGraph.js","container/Grapher.js","App.js","reportWebVitals.js","index.js"],"names":["Generator","props","formData","value","handleChange","onChange","handleSubmit","onSubmit","className","id","type","minLength","maxLength","name","placeholder","title","required","values","Title","LineGraph","i","gridWidth","numOfValues","length","useState","maxValue","setMaxValue","console","log","viewBox","preserveAspectRatio","class","x1","x2","y1","y2","points","map","index","toString","cx","cy","_","x","y","Array","fill","n","Math","round","BarGraph","transform","height","width","Grapher","graphData","setGraphData","setFormData","showHideBarGraph","showHideLineGraph","graphsVisible","setGraphsVisible","hideComponent","e","target","preventDefault","valuesArray","split","parseInt","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81962c58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Generator = (props) => {\r\n    const formData = props.value[0];\r\n    const handleChange = props.onChange;\r\n    const handleSubmit = props.onSubmit;\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={handleSubmit} className=\"form-section\" id=\"graph-form\">\r\n                <h2>Welcome to Grapher!</h2>\r\n                <p>Enter a title for your graph, and the values to be plotted. Values should be in integer or decimal form with a comma seperating individual values. Then press 'Generate'. Use the blue buttons to toggle the type of graph.</p>\r\n                <label className=\"form-component\">\r\n                    <span className=\"input-text\">Title</span>\r\n                    <input\r\n                        className=\"input-entry\"\r\n                        type=\"text\"\r\n                        minLength=\"1\"\r\n                        maxLength=\"50\"\r\n                        name=\"title\"\r\n                        placeholder=\"Cars sold in Feb...\"\r\n                        value={formData.title}\r\n                        onChange={handleChange}\r\n                        required\r\n                    ></input>\r\n                    <br />\r\n                </label>\r\n                <label className=\"form-component\">\r\n                <span className=\"input-text\">Values</span>\r\n                    <input\r\n                        className=\"input-entry\"\r\n                        type=\"text\"\r\n                        minLength=\"1\"\r\n                        name=\"values\"\r\n                        placeholder=\"10,90,30,50...\"\r\n                        value={formData.values}\r\n                        onChange={handleChange}\r\n                    ></input>\r\n                    <br />\r\n                </label>\r\n                <label className=\"form-component\">\r\n                    <button id=\"input-submit\" type=\"submit\" value=\"Generate\">Generate</button>\r\n                </label>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Generator;","import React from \"react\";\r\n\r\nconst Title = (props) => {\r\n    return (\r\n        <h1>{props.title}</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import React, { useState } from 'react';\r\nimport Title from \"./Title\";\r\n\r\nconst LineGraph = (props) => {\r\n    const graphHeight = 500;\r\n    const graphWidth = 800;\r\n    const gridHeight = 358;\r\n    const gridWidth = 584;\r\n    const gridYOrigin = 373;\r\n    const numOfValues = props.values.length;\r\n    const [maxValue, setMaxValue] = useState({\r\n        value: 0\r\n    })\r\n    var i;\r\n    for (i = 0; i < numOfValues; i++) {\r\n        if (maxValue.value < props.values[i]) {\r\n            setMaxValue({\r\n                ...maxValue,\r\n                value: props.values[i]\r\n            })\r\n        }\r\n    }\r\n\r\n    console.log(\"Values are: \" + props.values);\r\n    console.log(\"Max value is: \" + maxValue.value);\r\n\r\n    return (\r\n        <>\r\n            <Title title={props.title} />\r\n            <div className=\"graph-container\">\r\n                <svg className=\"graph-content graph\" viewBox={\"0 0 \" + graphWidth + \" \" + graphHeight} preserveAspectRatio=\"xMinYMin meet\">\r\n                    <title>{props.title} line graph.</title>\r\n                    <g class=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"90\" y1=\"5\" y2=\"371\"></line>\r\n                    </g>\r\n                    <g class=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"705\" y1=\"370\" y2=\"370\"></line>\r\n                    </g>\r\n                    <g class=\"grid grid-values\">\r\n                        <polyline\r\n                            points={props.values.map((value, index) =>\r\n                                (91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1)) + ((gridWidth/(numOfValues + 1))/2))\r\n                                + \",\" + (gridYOrigin - ((gridHeight/maxValue.value) * value))).toString()}\r\n                        />\r\n                        {props.values.map((value, index) =>\r\n                        <circle class=\"grid grid-values grid-values-circles\"\r\n                            cx={(91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))\r\n                                + ((gridWidth/(numOfValues + 1))/2)).toString()}\r\n                            cy={(gridYOrigin - ((gridHeight/maxValue.value) * value)).toString()}\r\n                        />)}\r\n                    </g>\r\n                    <g className=\"labels x-labels\">\r\n                        {props.values.map((_, index) =>\r\n                            <text x={(91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))\r\n                                + ((gridWidth/(numOfValues + 1))/2)).toString()} y=\"400\">{index}</text>)}\r\n                    </g>\r\n                    <g className=\"labels y-labels\">\r\n                        {(new Array(6)).fill(0).map((_, n) =>\r\n                            <text x=\"80\" y={(15 + (71 * n)).toString()}>\r\n                                {Math.round((maxValue.value - (maxValue.value/5) * n)*10)/10}\r\n                            </text>)}\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LineGraph;","import React, { useState } from 'react';\r\nimport Title from \"./Title\";\r\n\r\nconst BarGraph = (props) => {\r\n    const graphHeight = 500;\r\n    const graphWidth = 800;\r\n    const gridHeight = 358;\r\n    const gridWidth = 584;\r\n    const numOfValues = props.values.length;\r\n    const [maxValue, setMaxValue] = useState({\r\n        value: 0\r\n    })\r\n    var i;\r\n    for (i = 0; i < numOfValues; i++) {\r\n        if (maxValue.value < props.values[i]) {\r\n            setMaxValue({\r\n                ...maxValue,\r\n                value: props.values[i]\r\n            })\r\n        }\r\n    }\r\n\r\n    console.log(\"Values are: \" + props.values);\r\n    console.log(\"Max value is: \" + maxValue.value);\r\n\r\n    return (\r\n        <>\r\n            <Title title={props.title} />\r\n            <div className=\"graph-container\">\r\n                <svg className=\"graph-content graph\" viewBox={\"0 0 \" + graphWidth + \" \" + graphHeight} preserveAspectRatio=\"xMinYMin meet\">\r\n                    <title>{props.title} line graph.</title>\r\n                    <g class=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"90\" y1=\"5\" y2=\"371\"></line>\r\n                    </g>\r\n                    <g class=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"705\" y1=\"370\" y2=\"370\"></line>\r\n                    </g>\r\n                    <g class=\"grid grid-values\">\r\n                        {props.values.map((value, index) =>\r\n                            <g className=\"grid grid-values grid-values-bars\"\r\n                                transform={\"translate(\" + (91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))).toString() +\r\n                                \",\" + (11 + (gridHeight/maxValue.value) * (maxValue.value - value)).toString() + \")\"}>\r\n                                <rect height={((gridHeight/maxValue.value) * value).toString()}\r\n                                    width={(gridWidth/(numOfValues + 1)).toString()}></rect>\r\n                            </g>        \r\n                        )}\r\n                    </g>\r\n                    <g className=\"labels x-labels\">\r\n                        {props.values.map((_, index) =>\r\n                            <text x={(91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))\r\n                            + ((gridWidth/(numOfValues + 1))/2)).toString()} y=\"400\">{index}</text>)}\r\n                    </g>\r\n                    <g className=\"labels y-labels\">\r\n                        {(new Array(6)).fill(0).map((_, n) =>\r\n                            <text x=\"80\" y={(15 + (71 * n)).toString()}>\r\n                                {Math.round((maxValue.value - (maxValue.value/5) * n)*10)/10}\r\n                            </text>)}\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default BarGraph;","import React, { useState } from 'react';\r\nimport Generator from '../components/Generator/Generator';\r\nimport LineGraph from '../components/Graph/LineGraph';\r\nimport BarGraph from '../components/Graph/BarGraph';\r\n\r\nconst Grapher = () => {\r\n    const [graphData, setGraphData] = useState({\r\n        title: \"\",\r\n        values: []\r\n    })\r\n\r\n    const [formData, setFormData] = useState({\r\n        title: \"\",\r\n        values: []\r\n    })\r\n\r\n    const [graphsVisible, setGraphsVisible] = useState({\r\n        name: \"Graphs\",\r\n        showHideBarGraph: false,\r\n        showHideLineGraph: false\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        let valuesArray = formData.values.split(\",\");\r\n        valuesArray = valuesArray.map(x => parseInt(x));\r\n\r\n        setGraphData({\r\n            ...graphData,\r\n            title: formData.title,\r\n            values: valuesArray,\r\n        })\r\n\r\n        // if (formData.type === 0 || graphData.type === 0) {\r\n        //     if (graphsVisible.showHideBarGraph === false) {\r\n        //         setGraphsVisible({\r\n        //             ...graphsVisible,\r\n        //             showHideBarGraph: true,\r\n        //             showHideLineGraph: false\r\n        //         });\r\n        //     }\r\n        // } else {\r\n        //     if (graphsVisible.showHideLineGraph === false) {\r\n        //         setGraphsVisible({\r\n        //             ...graphsVisible,\r\n        //             showHideBarGraph: false,\r\n        //             showHideLineGraph: true\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    const hideComponent = (e) => {\r\n        switch(e) {\r\n            case \"showHideLineGraph\":\r\n                setGraphsVisible({\r\n                    showHideLineGraph: !graphsVisible.showHideLineGraph\r\n                });\r\n                break;\r\n            case \"showHideBarGraph\":\r\n                setGraphsVisible({\r\n                    showHideBarGraph: !graphsVisible.showHideBarGraph\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <Generator value={[formData, graphData]} onChange={handleChange} onSubmit={onSubmit}/>\r\n                <div>\r\n                    <button\r\n                        id=\"bar-button\"\r\n                        className=\"button\"\r\n                        onClick={() => hideComponent(\"showHideBarGraph\")}\r\n                    >\r\n                        BAR GRAPH\r\n                    </button>\r\n                    <button\r\n                        id=\"line-button\"\r\n                        className=\"button\"\r\n                        onClick={() => hideComponent(\"showHideLineGraph\")}\r\n                    >\r\n                        LINE GRAPH\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"graph-wrapper\">\r\n                {graphsVisible.showHideBarGraph && <BarGraph title={graphData.title} values={graphData.values}/>}\r\n                {graphsVisible.showHideLineGraph && <LineGraph title={graphData.title} values={graphData.values}/>}\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Grapher;","import './App.css';\nimport Grapher from './container/Grapher';\n\nfunction App() {\n  return (\n    <div className=\"page-wrapper\">\n      <Grapher />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}