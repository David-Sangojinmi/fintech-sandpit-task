{"version":3,"sources":["components/Generator/Generator.js","components/Graph/Title.js","components/Graph/LineGraph.js","components/Graph/BarGraph.js","container/Grapher.js","App.js","reportWebVitals.js","index.js"],"names":["Generator","props","formData","value","handleChange","onChange","handleSubmit","onSubmit","className","id","type","minLength","maxLength","name","placeholder","title","required","values","Title","LineGraph","gridWidth","numOfValues","length","maxValue","Math","max","viewBox","preserveAspectRatio","class","x1","x2","y1","y2","points","map","index","toString","cx","cy","_","x","y","Array","fill","n","round","BarGraph","transform","height","width","Grapher","useState","graphData","setGraphData","setFormData","showHideBarGraph","showHideLineGraph","graphsVisible","setGraphsVisible","hideComponent","e","target","preventDefault","valuesArray","split","parseInt","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAgDeA,EA9CG,SAACC,GACf,IAAMC,EAAWD,EAAME,MAAM,GACvBC,EAAeH,EAAMI,SACrBC,EAAeL,EAAMM,SAE3B,OACI,8BACI,uBAAMA,SAAUD,EAAcE,UAAU,eAAeC,GAAG,aAA1D,UACI,qDACA,4PACA,wBAAOD,UAAU,iBAAjB,UACI,sBAAMA,UAAU,aAAhB,mBACA,uBACIA,UAAU,cACVE,KAAK,OACLC,UAAU,IACVC,UAAU,KACVC,KAAK,QACLC,YAAY,sBACZX,MAAOD,EAASa,MAChBV,SAAUD,EACVY,UAAQ,IAEZ,0BAEJ,wBAAOR,UAAU,iBAAjB,UACA,sBAAMA,UAAU,aAAhB,oBACI,uBACIA,UAAU,cACVE,KAAK,OACLC,UAAU,IACVE,KAAK,SACLC,YAAY,iBACZX,MAAOD,EAASe,OAChBZ,SAAUD,IAEd,0BAEJ,sBAAMI,UAAU,iBAAhB,SACI,wBAAQC,GAAG,eAAeC,KAAK,SAASP,MAAM,WAA9C,8B,OCjCLe,EAND,SAACjB,GACX,OACI,6BAAKA,EAAMc,SCkDJI,EAnDG,SAAClB,GACf,IAGMmB,EAAY,IAEZC,EAAcpB,EAAMgB,OAAOK,OAC3BC,EAAWC,KAAKC,IAAL,MAAAD,KAAI,YAAQvB,EAAMgB,SAEnC,OACI,qCACI,cAAC,EAAD,CAAOF,MAAOd,EAAMc,QACpB,qBAAKP,UAAU,kBAAf,SACI,sBAAKA,UAAU,sBAAsBkB,QAAS,cAAyCC,oBAAoB,gBAA3G,UACI,kCAAQ1B,EAAMc,MAAd,kBACA,mBAAGa,MAAM,kBAAT,SACI,sBAAMC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,UAEpC,mBAAGJ,MAAM,kBAAT,SACI,sBAAMC,GAAG,KAAKC,GAAG,MAAMC,GAAG,MAAMC,GAAG,UAEvC,oBAAGJ,MAAM,mBAAT,UACI,0BACIK,OAAQhC,EAAMgB,OAAOiB,KAAI,SAAC/B,EAAOgC,GAAR,OACpB,GAAOf,GAAWC,EAAc,IAAe,IAARc,GAAkBf,GAAWC,EAAc,GAAI,EACrF,KApBV,IAFD,IAsB6CE,EAAYpB,MAASiC,aAEhEnC,EAAMgB,OAAOiB,KAAI,SAAC/B,EAAOgC,GAAR,OAClB,wBAAQP,MAAM,uCACVS,IAAK,GAAOjB,GAAWC,EAAc,IAAe,IAARc,GACpCf,GAAWC,EAAc,GAAI,GAAIe,WACzCE,IA1BJ,IAFD,IA4BqCf,EAAYpB,GAAQiC,mBAG5D,mBAAG5B,UAAU,kBAAb,SACKP,EAAMgB,OAAOiB,KAAI,SAACK,EAAGJ,GAAJ,OACd,sBAAMK,GAAI,GAAOpB,GAAWC,EAAc,IAAe,IAARc,GACzCf,GAAWC,EAAc,GAAI,GAAIe,WAAYK,EAAE,MADvD,SAC8DN,SAEtE,mBAAG3B,UAAU,kBAAb,SACM,IAAIkC,MAAM,GAAIC,KAAK,GAAGT,KAAI,SAACK,EAAGK,GAAJ,OACxB,sBAAMJ,EAAE,KAAKC,GAAI,GAAM,GAAKG,GAAIR,WAAhC,SACKZ,KAAKqB,MAAoC,IAA7BtB,EAAYA,EAAS,EAAKqB,IAAO,mBCK/DE,EA/CE,SAAC7C,GACd,IAGMmB,EAAY,IACZC,EAAcpB,EAAMgB,OAAOK,OAC3BC,EAAWC,KAAKC,IAAL,MAAAD,KAAI,YAAQvB,EAAMgB,SAEnC,OACI,qCACI,cAAC,EAAD,CAAOF,MAAOd,EAAMc,QACpB,qBAAKP,UAAU,kBAAf,SACI,sBAAKA,UAAU,sBAAsBkB,QAAS,cAAyCC,oBAAoB,gBAA3G,UACI,kCAAQ1B,EAAMc,MAAd,kBACA,mBAAGP,UAAU,kBAAb,SACI,sBAAMqB,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,UAEpC,mBAAGxB,UAAU,kBAAb,SACI,sBAAMqB,GAAG,KAAKC,GAAG,MAAMC,GAAG,MAAMC,GAAG,UAEvC,mBAAGxB,UAAU,mBAAb,SACKP,EAAMgB,OAAOiB,KAAI,SAAC/B,EAAOgC,GAAR,OACd,mBAA0B3B,UAAU,oCAChCuC,UAAW,cAAgB,GAAO3B,GAAWC,EAAc,IAAe,IAARc,IAAeC,WACjF,KAAO,GArBhB,IAqBiCb,GAAaA,EAAWpB,IAAQiC,WAAa,IAFzE,SAGI,sBAAMY,QAtBf,IAsBoCzB,EAAYpB,GAAOiC,WAC1Ca,OAAQ7B,GAAWC,EAAc,IAAIe,cAJrCD,EAAMC,iBAQtB,mBAAG5B,UAAU,kBAAb,SACKP,EAAMgB,OAAOiB,KAAI,SAACK,EAAGJ,GAAJ,OACd,sBAA6BK,GAAI,GAAOpB,GAAWC,EAAc,IAAe,IAARc,GACpEf,GAAWC,EAAc,GAAI,GAAIe,WAAYK,EAAE,MADnD,SAC0DN,GAD/CA,EAAMC,iBAGzB,mBAAG5B,UAAU,kBAAb,SACM,IAAIkC,MAAM,GAAIC,KAAK,GAAGT,KAAI,SAACK,EAAGK,GAAJ,OACxB,sBAAyBJ,EAAE,KAAKC,GAAI,GAAM,GAAKG,GAAIR,WAAnD,SACKZ,KAAKqB,MAAoC,IAA7BtB,EAAYA,EAAS,EAAKqB,IAAO,IADvCA,EAAER,0BCgD1Bc,EAnFC,WAAO,IAAD,EACgBC,mBAAS,CACvCpC,MAAO,GACPE,OAAQ,KAHM,mBACXmC,EADW,KACAC,EADA,OAMcF,mBAAS,CACrCpC,MAAO,GACPE,OAAQ,KARM,mBAMXf,EANW,KAMDoD,EANC,OAWwBH,mBAAS,CAC/CtC,KAAM,SACN0C,kBAAkB,EAClBC,mBAAmB,IAdL,mBAWXC,EAXW,KAWIC,EAXJ,KAqCZC,EAAgB,SAACC,GACnB,OAAOA,GACH,IAAK,oBACDF,EAAiB,CACbF,mBAAoBC,EAAcD,oBAEtC,MACJ,IAAK,mBACDE,EAAiB,CACbH,kBAAmBE,EAAcF,qBAQjD,OACI,sBAAK/C,UAAU,MAAf,UACI,gCACI,cAAC,EAAD,CAAWL,MAAO,CAACD,EAAUkD,GAAY/C,SAxChC,SAACuD,GAClBN,EAAY,2BACLpD,GADI,kBAEN0D,EAAEC,OAAOhD,KAAO+C,EAAEC,OAAO1D,UAqC2CI,SAjC5D,SAACqD,GACdA,EAAEE,iBAEF,IAAIC,EAAc7D,EAASe,OAAO+C,MAAM,KACxCD,EAAcA,EAAY7B,KAAI,SAAAM,GAAC,OAAIyB,SAASzB,MAE5Ca,EAAa,2BACND,GADK,IAERrC,MAAOb,EAASa,MAChBE,OAAQ8C,QAyBJ,gCACI,wBACItD,GAAG,aACHD,UAAU,SACV0D,QAAS,kBAAMP,EAAc,qBAHjC,uBAOA,wBACIlD,GAAG,cACHD,UAAU,SACV0D,QAAS,kBAAMP,EAAc,sBAHjC,8BASR,sBAAKnD,UAAU,gBAAf,UACKiD,EAAcF,kBAAoB,cAAC,EAAD,CAAUxC,MAAOqC,EAAUrC,MAAOE,OAAQmC,EAAUnC,SACtFwC,EAAcD,mBAAqB,cAAC,EAAD,CAAWzC,MAAOqC,EAAUrC,MAAOE,OAAQmC,EAAUnC,gBCvE1FkD,MARf,WACE,OACE,qBAAK3D,UAAU,eAAf,SACE,cAAC,EAAD,OCMS4D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f7cd0a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Generator = (props) => {\r\n    const formData = props.value[0];\r\n    const handleChange = props.onChange;\r\n    const handleSubmit = props.onSubmit;\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={handleSubmit} className=\"form-section\" id=\"graph-form\">\r\n                <h2>Welcome to Grapher!</h2>\r\n                <p>Enter a title for your graph, and the values to be plotted. Values should be in integer or decimal form with a comma seperating individual values. Then press 'Generate'. Use the blue buttons to toggle the type of graph.</p>\r\n                <label className=\"form-component\">\r\n                    <span className=\"input-text\">Title</span>\r\n                    <input\r\n                        className=\"input-entry\"\r\n                        type=\"text\"\r\n                        minLength=\"1\"\r\n                        maxLength=\"50\"\r\n                        name=\"title\"\r\n                        placeholder=\"Cars sold in Feb...\"\r\n                        value={formData.title}\r\n                        onChange={handleChange}\r\n                        required\r\n                    ></input>\r\n                    <br />\r\n                </label>\r\n                <label className=\"form-component\">\r\n                <span className=\"input-text\">Values</span>\r\n                    <input\r\n                        className=\"input-entry\"\r\n                        type=\"text\"\r\n                        minLength=\"1\"\r\n                        name=\"values\"\r\n                        placeholder=\"10,90,30,50...\"\r\n                        value={formData.values}\r\n                        onChange={handleChange}\r\n                    ></input>\r\n                    <br />\r\n                </label>\r\n                <span className=\"form-component\">\r\n                    <button id=\"input-submit\" type=\"submit\" value=\"Generate\">Generate</button>\r\n                </span>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Generator;","import React from \"react\";\r\n\r\nconst Title = (props) => {\r\n    return (\r\n        <h1>{props.title}</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport Title from \"./Title\";\r\n\r\nconst LineGraph = (props) => {\r\n    const graphHeight = 500;\r\n    const graphWidth = 800;\r\n    const gridHeight = 358;\r\n    const gridWidth = 584;\r\n    const gridYOrigin = 373;\r\n    const numOfValues = props.values.length;\r\n    const maxValue = Math.max(...props.values);\r\n\r\n    return (\r\n        <>\r\n            <Title title={props.title} />\r\n            <div className=\"graph-container\">\r\n                <svg className=\"graph-content graph\" viewBox={\"0 0 \" + graphWidth + \" \" + graphHeight} preserveAspectRatio=\"xMinYMin meet\">\r\n                    <title>{props.title} line graph.</title>\r\n                    <g class=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"90\" y1=\"5\" y2=\"371\"></line>\r\n                    </g>\r\n                    <g class=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"705\" y1=\"370\" y2=\"370\"></line>\r\n                    </g>\r\n                    <g class=\"grid grid-values\">\r\n                        <polyline\r\n                            points={props.values.map((value, index) =>\r\n                                (91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1)) + ((gridWidth/(numOfValues + 1))/2))\r\n                                + \",\" + (gridYOrigin - ((gridHeight/maxValue) * value))).toString()}\r\n                        />\r\n                        {props.values.map((value, index) =>\r\n                        <circle class=\"grid grid-values grid-values-circles\"\r\n                            cx={(91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))\r\n                                + ((gridWidth/(numOfValues + 1))/2)).toString()}\r\n                            cy={(gridYOrigin - ((gridHeight/maxValue) * value)).toString()}\r\n                        />)}\r\n                    </g>\r\n                    <g className=\"labels x-labels\">\r\n                        {props.values.map((_, index) =>\r\n                            <text x={(91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))\r\n                                + ((gridWidth/(numOfValues + 1))/2)).toString()} y=\"400\">{index}</text>)}\r\n                    </g>\r\n                    <g className=\"labels y-labels\">\r\n                        {(new Array(6)).fill(0).map((_, n) =>\r\n                            <text x=\"80\" y={(15 + (71 * n)).toString()}>\r\n                                {Math.round((maxValue - (maxValue/5) * n)*10)/10}\r\n                            </text>)}\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LineGraph;","import React from 'react';\r\nimport Title from \"./Title\";\r\n\r\nconst BarGraph = (props) => {\r\n    const graphHeight = 500;\r\n    const graphWidth = 800;\r\n    const gridHeight = 358;\r\n    const gridWidth = 584;\r\n    const numOfValues = props.values.length;\r\n    const maxValue = Math.max(...props.values);\r\n\r\n    return (\r\n        <>\r\n            <Title title={props.title} />\r\n            <div className=\"graph-container\">\r\n                <svg className=\"graph-content graph\" viewBox={\"0 0 \" + graphWidth + \" \" + graphHeight} preserveAspectRatio=\"xMinYMin meet\">\r\n                    <title>{props.title} line graph.</title>\r\n                    <g className=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"90\" y1=\"5\" y2=\"371\"></line>\r\n                    </g>\r\n                    <g className=\"grid grid-lines\">\r\n                        <line x1=\"90\" x2=\"705\" y1=\"370\" y2=\"370\"></line>\r\n                    </g>\r\n                    <g className=\"grid grid-values\">\r\n                        {props.values.map((value, index) =>\r\n                            <g key={index.toString()} className=\"grid grid-values grid-values-bars\"\r\n                                transform={\"translate(\" + (91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))).toString() +\r\n                                \",\" + (11 + (gridHeight/maxValue) * (maxValue - value)).toString() + \")\"}>\r\n                                <rect height={((gridHeight/maxValue) * value).toString()}\r\n                                    width={(gridWidth/(numOfValues + 1)).toString()}></rect>\r\n                            </g>        \r\n                        )}\r\n                    </g>\r\n                    <g className=\"labels x-labels\">\r\n                        {props.values.map((_, index) =>\r\n                            <text key={index.toString()} x={(91 + ((gridWidth/(numOfValues + 1)) * (index * 1.1))\r\n                            + ((gridWidth/(numOfValues + 1))/2)).toString()} y=\"400\">{index}</text>)}\r\n                    </g>\r\n                    <g className=\"labels y-labels\">\r\n                        {(new Array(6)).fill(0).map((_, n) =>\r\n                            <text key={n.toString()} x=\"80\" y={(15 + (71 * n)).toString()}>\r\n                                {Math.round((maxValue - (maxValue/5) * n)*10)/10}\r\n                            </text>)}\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BarGraph;","import React, { useState } from 'react';\r\nimport Generator from '../components/Generator/Generator';\r\nimport LineGraph from '../components/Graph/LineGraph';\r\nimport BarGraph from '../components/Graph/BarGraph';\r\n\r\nconst Grapher = () => {\r\n    const [graphData, setGraphData] = useState({\r\n        title: \"\",\r\n        values: []\r\n    })\r\n\r\n    const [formData, setFormData] = useState({\r\n        title: \"\",\r\n        values: []\r\n    })\r\n\r\n    const [graphsVisible, setGraphsVisible] = useState({\r\n        name: \"Graphs\",\r\n        showHideBarGraph: true,\r\n        showHideLineGraph: false\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        let valuesArray = formData.values.split(\",\");\r\n        valuesArray = valuesArray.map(x => parseInt(x));\r\n\r\n        setGraphData({\r\n            ...graphData,\r\n            title: formData.title,\r\n            values: valuesArray,\r\n        })\r\n    }\r\n\r\n    const hideComponent = (e) => {\r\n        switch(e) {\r\n            case \"showHideLineGraph\":\r\n                setGraphsVisible({\r\n                    showHideLineGraph: !graphsVisible.showHideLineGraph\r\n                });\r\n                break;\r\n            case \"showHideBarGraph\":\r\n                setGraphsVisible({\r\n                    showHideBarGraph: !graphsVisible.showHideBarGraph\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <Generator value={[formData, graphData]} onChange={handleChange} onSubmit={onSubmit}/>\r\n                <div>\r\n                    <button\r\n                        id=\"bar-button\"\r\n                        className=\"button\"\r\n                        onClick={() => hideComponent(\"showHideBarGraph\")}\r\n                    >\r\n                        BAR GRAPH\r\n                    </button>\r\n                    <button\r\n                        id=\"line-button\"\r\n                        className=\"button\"\r\n                        onClick={() => hideComponent(\"showHideLineGraph\")}\r\n                    >\r\n                        LINE GRAPH\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"graph-wrapper\">\r\n                {graphsVisible.showHideBarGraph && <BarGraph title={graphData.title} values={graphData.values}/>}\r\n                {graphsVisible.showHideLineGraph && <LineGraph title={graphData.title} values={graphData.values}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Grapher;","import './App.css';\nimport Grapher from './container/Grapher';\n\nfunction App() {\n  return (\n    <div className=\"page-wrapper\">\n      <Grapher />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}